# -*- coding: utf-8 -*-
"""Normalization In Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BLFI0_zI_nRXHPdUkTeP4bcbaH1v7IkS

# **Normalization In Machine Learning**

**<h3>On this notebook we will study the impact that normalization has in a Linear Regression Model performance</h3>**
"""

from pandas import read_csv, DataFrame
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
import matplotlib.pyplot as plt

"""**<h4>Let's begin by importing the data<h4>**
The dataset is about house pricing, we will try to predict the house prices through the size in squared feet and the number of bedrooms
"""

data= read_csv('house_price_prediction.csv')
data.head()

"""**<h4>Now we mount out feature vector and the target variable vector<h4>**


*   Feature Vector **X** : ( Squared Feet, Bedrooms )
*   Target **Y** : Price


"""

X = data[['sqft_living', 'bedrooms']]
Y = data['price']

"""**<h4>The next step is to split the data in train-test subsets**"""

x_train, x_test, y_train, y_test = train_test_split(X,
                                                    Y,
                                                    test_size=0.2,
                                                    random_state=40)

"""**<h4>We create and train the model**"""

model = LinearRegression()
model = model.fit(x_train, y_train)

"""**<h4>We extract the models accuracy**"""

accuracy = model.score(x_test, y_test)
accuracy = round(accuracy*100, 3)
print(f'Our Accuracy Without Normalization is: {accuracy}%')

"""**Let's repeat but normalizing the data**"""

normalized_X = (X-X.min())/(X.max()-X.min())

norm_x_train, norm_x_test, y_train, y_test = train_test_split(normalized_X,
                                                              Y,
                                                              test_size=0.2,
                                                              random_state=40)
model = LinearRegression()
model = model.fit(norm_x_train, y_train)
accuracy_with_normalization = model.score(norm_x_test, y_test)
accuracy_with_normalization = round(accuracy_with_normalization*100, 3)
print(f'Our accuracy with normalization is {accuracy_with_normalization}%')

scenarios = ['Not Normalized', 'Normalized']
accuracies = [accuracy, accuracy_with_normalization]

plt.bar(scenarios, accuracies)